<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Wedding RSVP</title>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@600&family=Great+Vibes&display=swap" rel="stylesheet">
  <style>
    /* ---------- Color System: Blue/Gray ---------- */
    :root{
      --bg-grad-a:#f2f5f9; --bg-grad-b:#e9eef5; --card:#ffffff; --ink:#0b1220; --muted:#5b677a;
      --line:#e3e8ef; --navy:#0f2745; --navy-600:#14355f; --slate:#93a1b3; --sky:#cfe3ff; --accent:#2d72d9;
      --rose:#b76e79; --success:#0f7b6c; --danger:#9b1c31; --shadow:0 14px 40px rgba(15,39,69,.12);
      --inset:inset 0 0 0 1px rgba(20,53,95,.08); --radius:22px;
    }

    /* ---------- Layout ---------- */
    html,body{height:100%}
    body{
      font-family:'Playfair Display', serif;
      background:
        radial-gradient(1200px 700px at 10% -10%, rgba(45,114,217,.05), transparent 60%),
        radial-gradient(900px 600px at 120% 20%, rgba(15,39,69,.06), transparent 55%),
        linear-gradient(to bottom right, var(--bg-grad-a), var(--bg-grad-b));
      display:flex;justify-content:center;align-items:center;
      margin:0;
      padding: max(12px, env(safe-area-inset-top)) max(12px, env(safe-area-inset-right))
               max(12px, env(safe-area-inset-bottom)) max(12px, env(safe-area-inset-left));
      color:var(--ink);
      min-height: 100svh; /* handles mobile browser chrome */
    }

    .container{
      background:var(--card);
      /* fluid padding that scales with screen size */
      padding: clamp(16px, 4vw, 44px) clamp(14px, 4vw, 40px);
      border-radius:var(--radius);
      box-shadow:var(--shadow), var(--inset);
      width: 100%;
      /* Auto-stretch: min 320px, up to 96vw, allow roomy desktops up to 1400px */
      max-width: clamp(320px, 96vw, 1400px);
      text-align:center;position:relative;
      animation:fadeIn .8s ease;
      border:1px solid var(--line);
      overflow:hidden;
    }

    /* Decorative corner */
    .container::after{
      content:"";
      position:absolute; inset:auto -40px -40px auto;
      width: clamp(100px, 22vw, 160px);
      height: clamp(100px, 22vw, 160px);
      border-radius:32px;
      background:radial-gradient(120px 120px at 80% 80%, rgba(45,114,217,.12), transparent 60%);
      filter:blur(2px);
      pointer-events:none;
    }

    /* ---------- Typography ---------- */
    h2{
      font-family:'Great Vibes', cursive;
      font-size: clamp(28px, 6vw, 56px);
      line-height:1.08;
      color:var(--navy);
      margin:0 0 6px;
      letter-spacing:.2px;
      text-shadow:0 1px 0 rgba(255,255,255,.8);
    }
    p.subtitle{
      font-size: clamp(14px, 2.4vw, 18px);
      color:var(--muted);
      margin:4px 0 clamp(14px, 3vw, 24px);
    }

    /* ---------- Inputs ---------- */
    input[type="text"], textarea{
      width:100%;
      padding: clamp(10px, 2.5vw, 14px) clamp(12px, 3vw, 18px);
      margin: clamp(8px, 2vw, 10px) 0;
      border-radius:12px;
      border:1px solid var(--line);
      font-size: clamp(14px, 2.4vw, 18px);
      background:#fbfdff;
      transition:border-color .25s, box-shadow .25s, background .25s;
      box-shadow:inset 0 1px 0 rgba(255,255,255,.6);
    }
    input[type="text"]::placeholder, textarea::placeholder{ color:#9aa6b2 }
    input:focus, textarea:focus{
      border-color:var(--accent);
      outline:none;
      box-shadow:0 0 0 4px rgba(45,114,217,.15);
      background:#fff;
    }
    textarea{ resize:vertical; min-height:84px }
    .readonly{ background:#f3f6fa; color:#46556b }

    label{ margin-right:16px; font-size: clamp(14px, 2.4vw, 18px); color:var(--ink) }
    #status{ font-size: clamp(14px, 2.4vw, 18px); font-weight:600; margin:16px 0; color:var(--navy) }

    /* ---------- Buttons ---------- */
    .btn{
      padding: clamp(10px, 2.6vw, 14px) clamp(16px, 3.2vw, 22px);
      margin:10px 6px;
      border:none; border-radius:999px;
      background:linear-gradient(135deg, var(--navy), var(--navy-600));
      color:#fff; font-size: clamp(14px, 2.6vw, 18px);
      font-family:'Playfair Display', serif;
      cursor:pointer; transition:transform .15s ease, box-shadow .25s ease, opacity .2s;
      box-shadow:0 8px 20px rgba(15,39,69,.25);
      display:inline-flex; align-items:center; gap:.5rem;
    }
    .btn:hover{ transform:translateY(-1px); box-shadow:0 12px 24px rgba(15,39,69,.28) }
    .btn:active{ transform:translateY(0) scale(.99) }
    .btn--outline{
      background:linear-gradient(#fff,#fff);
      color:var(--navy); border:1px solid var(--navy);
      box-shadow:none;
    }
    .btn--muted{
      background:linear-gradient(135deg, #73839a, #5d6c81);
    }

    /* ---------- Cards / Sections ---------- */
    #rsvpForm{
      background:linear-gradient(180deg, #f7faff, #f1f5fb);
      padding: clamp(14px, 3vw, 24px);
      border-radius:16px; margin-top: clamp(10px, 2.8vw, 20px);
      box-shadow:inset 0 0 0 1px rgba(20,53,95,.06);
      border:1px solid var(--line);
      animation:fadeInUp .6s ease;
    }
    #guestDetails{
      background:linear-gradient(180deg, #ffffff, #fafcff);
      padding: clamp(14px, 3vw, 24px);
      border-radius:16px; margin-top: clamp(10px, 2.8vw, 20px);
      border:1px solid var(--line);
      box-shadow:inset 0 0 0 1px rgba(20,53,95,.04);
    }
    #guestInputs{ display: grid; gap: clamp(6px, 2vw, 12px); }
    #guestInputs input{
      width:100%;
      padding: clamp(10px, 2.4vw, 12px) clamp(12px, 2.6vw, 14px);
      border-radius:10px; border:1px solid var(--line);
      background:#ffffff;
    }
    #guestInputs .hint{ font-size: clamp(11px, 2.3vw, 12px); opacity:.8; color:#6b778a; margin-top:6px }

    .hidden{ display:none }

    /* ---------- Loading Overlay ---------- */
    .loading {
      position: fixed; inset: 0;
      min-height: 100svh; /* fill viewport even with mobile browser UI */
      background: rgba(255,255,255,.65);
      backdrop-filter: blur(4px);
      display: grid; place-items: center;
      z-index: 9999;
    }
    .loading.hidden { display: none; }

    .loading .loading-box{
      background: #fff;
      border: 1px solid var(--line);
      border-radius: 16px;
      padding: clamp(12px, 3vw, 22px) clamp(14px, 3.6vw, 28px);
      box-shadow: var(--shadow);
      display: flex; align-items: center; gap: 12px;
      color: var(--ink);
      font-weight: 600;
      max-width: 90vw;
    }

    .spinner{
      width: clamp(18px, 4.5vw, 28px);
      height: clamp(18px, 4.5vw, 28px);
      border-radius: 50%;
      border: 3px solid #d8e0ea;
      border-top-color: var(--accent);
      animation: spin .8s linear infinite;
    }
    @keyframes spin { to { transform: rotate(360deg); } }

    /* Pointer lock while loading */
    body.loading-lock { pointer-events: none; }
    body.loading-lock #loadingOverlay { pointer-events: all; }

    /* ---------- Responsive tweaks ---------- */
    @media (max-width: 640px){
      .btn{ width:100%; margin:6px 0; }
      label{ display:inline-flex; align-items:center; margin:8px 12px 0 0; }
    }

    /* ---------- Motion accessibility ---------- */
    @media (prefers-reduced-motion: reduce){
      *{ animation: none !important; transition: none !important; }
    }

    /* ---------- Animations ---------- */
    @keyframes fadeIn{ from{opacity:0; transform:scale(.97)} to{opacity:1; transform:scale(1)} }
    @keyframes fadeInUp{ from{opacity:0; transform:translateY(14px)} to{opacity:1; transform:translateY(0)} }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading hidden" aria-live="polite" aria-busy="true">
    <div class="loading-box">
      <div class="spinner" aria-hidden="true"></div>
      <p>Please wait… loading</p>
    </div>
  </div>

  <div class="container">
    <h2>Wedding RSVP</h2>
    <p class="subtitle">We can’t wait to celebrate with you! ✨</p>

    <input type="text" id="guestName" placeholder="Enter your full name" />
    <button class="btn" onclick="checkName()">Continue</button>

    <p id="status"></p>

    <p id="editPrompt" class="hidden"></p>
    <div id="editButtons" class="hidden">
      <button class="btn" onclick="startEditing()">Yes, edit RSVP</button>
      <button class="btn btn--outline" onclick="cancelEditing()">No, keep it</button>
    </div>

    <div id="rsvpForm" class="hidden">
      <p style="margin:0 0 10px;color:#334155">Will you attend?</p>
      <label><input type="radio" name="attendance" value="Yes" checked /> Yes 💙</label>
      <label><input type="radio" name="attendance" value="No" /> No 💭</label><br />
      <div id="updateSection" class="hidden" style="margin-top:10px">
        <button class="btn btn--muted" onclick="submitRSVP()">Update RSVP</button>
      </div>
    </div>

    <div id="guestDetails" class="hidden">
      <input type="hidden" id="guestCount" min="0" />
      <div id="guestInputs"></div>
      <textarea id="guestNames" class="hidden"></textarea><br />
      <div id="submitSection" class="hidden">
        <button class="btn" onclick="submitRSVP()">Submit RSVP</button>
      </div>
    </div>
  </div>

  <script>
    /* Set to your Apps Script deployment URL */
    const WEB_APP_URL = "https://script.google.com/macros/s/AKfycbzg22K276Q_YXBEowV2lHHF7cwIEom5VydMEEld5fhMTfC4E4ycyOkJRm1oazeh_SV1/exec";

    const INCLUDE_MAIN_IN_SUBMIT = false;
    const COUNT_INCLUDES_MAIN   = true;

    let guestData = null;
    let editingEnabled = false;

    function showLoading(msg = "Please wait… loading") {
      const ov = document.getElementById("loadingOverlay");
      ov.querySelector("p").textContent = msg;
      ov.classList.remove("hidden");
      document.body.classList.add("loading-lock");
    }
    function hideLoading() {
      document.getElementById("loadingOverlay").classList.add("hidden");
      document.body.classList.remove("loading-lock");
    }
    function setDisabledWhileLoading(disabled = true) {
      document.querySelectorAll(".container button, .container input, .container textarea").forEach(el => {
        if (!el.closest("#loadingOverlay")) el.disabled = disabled;
      });
    }

    function renderGuestInputs(count, prefill = [], mainName = "") {
      const box = document.getElementById("guestInputs");
      box.innerHTML = "";
      const n = Math.max(0, Number(count || 0));
      if (n === 0) return;

      const firstWrap = document.createElement("div");
      const first = document.createElement("input");
      first.type = "text";
      first.id = "guest_1";
      first.placeholder = "Guest 1 (You)";
      first.value = mainName || "";
      first.readOnly = true;
      first.classList.add("readonly");
      firstWrap.appendChild(first);
      box.appendChild(firstWrap);

      for (let i = 2; i <= n; i++) {
        const wrap = document.createElement("div");
        const input = document.createElement("input");
        input.type = "text";
        input.id = `guest_${i}`;
        input.placeholder = `Guest ${i} full name`;
        input.value = prefill[i - 2] || "";
        wrap.appendChild(input);
        box.appendChild(wrap);
      }

      const hint = document.createElement("div");
      hint.className = "hint";
      hint.textContent = "Tip: leave blanks for TBD guests—those will be ignored.";
      box.appendChild(hint);
    }

    function getGuestNamesFromInputs() {
      return Array.from(document.querySelectorAll("#guestInputs input"))
        .map(el => el.value.trim())
        .filter(v => v.length > 0);
    }

    function setFormEditable(enabled) {
      const count = document.getElementById("guestCount");
      const inputs = Array.from(document.querySelectorAll("#guestInputs input"));
      const radios = Array.from(document.querySelectorAll('input[name="attendance"]'));

      inputs.forEach((el, idx) => {
        if (idx === 0) { el.readOnly = true; el.disabled = !enabled; el.classList.add("readonly"); }
        else { el.readOnly = !enabled; el.disabled = !enabled; el.classList.toggle("readonly", !enabled); }
      });

      count.readOnly = !enabled;
      count.disabled = !enabled;
      radios.forEach(r => r.disabled = !enabled);
    }

    function updateVisibilityByAttendance() {
      const selected = document.querySelector('input[name="attendance"]:checked')?.value || "Yes";
      if (selected === "Yes") {
        document.getElementById("guestDetails").classList.remove("hidden");
        document.getElementById("submitSection").classList.toggle("hidden", !editingEnabled);
        document.getElementById("updateSection").classList.add("hidden");
      } else {
        document.getElementById("guestDetails").classList.add("hidden");
        document.getElementById("submitSection").classList.add("hidden");
        document.getElementById("updateSection").classList.toggle("hidden", !editingEnabled);
      }
    }

    async function checkName() {
      const name = document.getElementById("guestName").value.trim();
      if (!name) return alert("Please enter your name");

      showLoading("Checking your name…");
      setDisabledWhileLoading(true);
      try {
        const response = await fetch(WEB_APP_URL + "?name=" + encodeURIComponent(name));
        if (!response.ok) throw new Error("Network error " + response.status);
        const result = await response.json();

        if (!result.exists) {
          document.getElementById("status").innerText = "❌ Name not found in the guest list.";
          hideFormAndButtons();
          return;
        }

        guestData = result;
        const planned = Number(result.plannedGuests || 0);
        const prefillList = (result.additionalGuests || "")
          .split(/\r?\n|,\s*/).map(s => s.trim()).filter(Boolean);

        const guestCountInput = document.getElementById("guestCount");
        guestCountInput.value = planned;
        guestCountInput.max = planned;
        guestCountInput.min = 0;

        if (result.alreadyRegistered === "Yes") {
          const remainingSeats = planned - Number(result.registeredGuests || 0);

          if (remainingSeats <= 0) {
            editingEnabled = false;
            document.getElementById("status").innerText = "✅ Completed. Already Registered. You want to edit?";
            renderGuestInputs(planned, prefillList, result.name);
            setFormEditable(false);
            document.getElementById("submitSection").classList.add("hidden");
            document.getElementById("updateSection").classList.add("hidden");
            document.getElementById("rsvpForm").classList.add("hidden");
            document.getElementById("editPrompt").classList.remove("hidden");
            document.getElementById("editButtons").classList.remove("hidden");
          } else {
            editingEnabled = false;
            document.getElementById("status").innerText =
              `⚠️ You already submitted, but there are ${remainingSeats} seat(s) left. Update?`;
            renderGuestInputs(planned, prefillList, result.name);
            setFormEditable(false);
            document.getElementById("rsvpForm").classList.add("hidden");
            document.getElementById("editPrompt").classList.remove("hidden");
            document.getElementById("editButtons").classList.remove("hidden");
          }
        } else {
          editingEnabled = true;
          document.getElementById("status").innerText =
            `🎉 Welcome ${result.name}! You have ${planned} planned guests under your name.`;
          renderGuestInputs(planned, prefillList, result.name);
          setFormEditable(true);
          document.getElementById("rsvpForm").classList.remove("hidden");
          document.getElementById("editPrompt").classList.add("hidden");
          document.getElementById("editButtons").classList.add("hidden");
        }

        const attendanceRadios = document.getElementsByName('attendance');
        attendanceRadios.forEach(r => r.addEventListener('change', updateVisibilityByAttendance));
        updateVisibilityByAttendance();

      } catch (err) {
        console.error("Error in checkName:", err);
        document.getElementById("status").innerText = "⚠️ Error connecting to server. Check console.";
      } finally {
        hideLoading();
        setDisabledWhileLoading(false);
      }
    }

    function startEditing() {
      editingEnabled = true;
      document.getElementById("rsvpForm").classList.remove("hidden");
      document.getElementById("status").innerText = `Hi ${guestData.name}, you can now edit your RSVP.`;
      document.getElementById("editPrompt").classList.add("hidden");
      document.getElementById("editButtons").classList.add("hidden");
      document.getElementById("submitSection").classList.add("hidden");
      setFormEditable(true);
      updateVisibilityByAttendance();
    }

    function cancelEditing() {
      hideFormAndButtons();
      setFormEditable(false);
      editingEnabled = false;
      document.getElementById("status").innerText = "✅ RSVP remains unchanged.";
    }

    function hideFormAndButtons() {
      document.getElementById("rsvpForm").classList.add("hidden");
      document.getElementById("guestDetails").classList.add("hidden");
      document.getElementById("submitSection").classList.add("hidden");
      document.getElementById("updateSection").classList.add("hidden");
      document.getElementById("editPrompt").classList.add("hidden");
      document.getElementById("editButtons").classList.add("hidden");
    }

    async function submitRSVP() {
      if (!guestData) return alert("Please check your name first!");

      const attendance = document.querySelector('input[name="attendance"]:checked').value;

      const namesAll = getGuestNamesFromInputs();
      const namesForSubmit = INCLUDE_MAIN_IN_SUBMIT ? namesAll : namesAll.slice(1);
      let guestNames = namesForSubmit.join("\n");
      let guestCount = COUNT_INCLUDES_MAIN ? namesAll.length : Math.max(0, namesAll.length - 1);

      if (attendance === "No") {
        guestNames = "";
        guestCount = 0;
      }

      document.getElementById("guestNames").value = guestNames;
      document.getElementById("guestCount").value = String(guestCount);

      if (!WEB_APP_URL) {
        document.getElementById("status").innerText = "⚠️ Set WEB_APP_URL to your Apps Script deployment.";
        return;
      }

      showLoading("Submitting your RSVP…");
      setDisabledWhileLoading(true);
      try {
        const data = new URLSearchParams();
        data.append("row", guestData.row);
        data.append("name", guestData.name);
        data.append("attendance", attendance);
        data.append("guestCount", String(guestCount));
        data.append("guestNames", guestNames);

        const response = await fetch(WEB_APP_URL, { method: "POST", body: data });
        const result = await response.json();
        document.getElementById("status").innerText = result.message;

        setFormEditable(false);
        editingEnabled = false;
        hideFormAndButtons();
      } catch (err) {
        console.error("Error in submitRSVP:", err);
        document.getElementById("status").innerText = "⚠️ Failed to submit RSVP. Check console.";
      } finally {
        hideLoading();
        setDisabledWhileLoading(false);
      }
    }
  </script>
</body>
</html>
